webpackHotUpdate("personal-portfolio",{

/***/ "./packages/mars-theme/src/components/templates/Home.js":
/*!**************************************************************!*\
  !*** ./packages/mars-theme/src/components/templates/Home.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sections_Intro__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sections/Intro */ \"./packages/mars-theme/src/components/templates/sections/Intro.js\");\n/* harmony import */ var _sections_MesProjets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sections/MesProjets */ \"./packages/mars-theme/src/components/templates/sections/MesProjets.js\");\n/* harmony import */ var _sections_Testimonials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sections/Testimonials */ \"./packages/mars-theme/src/components/templates/sections/Testimonials.js\");\n/* harmony import */ var _sections_Blog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sections/Blog */ \"./packages/mars-theme/src/components/templates/sections/Blog.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const Home=({state})=>{const data=state.source.get(state.router.link);const page=state.source[data.type][data.id];return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(Section,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroSection,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroText,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroSubTitle,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{children:\"Tristan TORNATORE - Freelance Marketing Digital\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{children:\"CAEN NORMANDIE ET PARIS\"})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"h1\",{children:[\"D\\xE9veloppeur front-end\",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"br\",{}),\"Acquisition SEO & SEA\",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"br\",{}),\"Tracking & Analyse Data\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"span\",{children:\"Je suis un d\\xE9veloppeur web Freelance bas\\xE9 en France, \\xE0 Caen en Normandie. Ex-Google for Startups coordinateur, j\\u2019ai l\\u2019habitude de proposer des exp\\xE9riences digitales compl\\xE8tes du site web jusqu\\u2019\\xE0 la strat\\xE9gie d\\u2019acquisition. \"})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroImage,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/07/Tristan-TORNATORE-Google-Vivatech.jpg\",alt:\"Tristan Tornatore d\\xE9veloppeur front-end freelance et wordpress\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Flotte,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/07/React-icon.svg\",alt:\"\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Flotte2,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/07/adwords.svg\",alt:\"\"})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(SubMenu,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"ul\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/developpeur-front-end/\",children:\"\\xC0 propos de moi\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/developpeur-front-end/\",children:\"Mon parcours\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/contacter-tristan-freelance-wordpress/\",children:\"Travailler avec moi\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/astuces-digitales/\",children:\"Mes astuces Digitales\"})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(ArrowDown,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/Arrow-down.svg\",alt:\"fl\\xE8che qui pointe vers le bas\"})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_Intro__WEBPACK_IMPORTED_MODULE_2__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_MesProjets__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_Testimonials__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_Blog__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Home));const Section=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit9\",label:\"Section\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Article=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit8\",label:\"Article\"})(\"padding:200px 20%;background:url(\",props=>props.background||\"\",\");@media screen and (max-width: 1920px){padding:80px 12%;}@media screen and (max-width: 1740px){padding:80px 8%;}@media screen and (max-width: 680px){padding:40px 12%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const HeroSection=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit7\",label:\"HeroSection\"})( false?undefined:{name:\"elli65\",styles:\"display:grid;grid-template-columns:repeat(3, 1fr);grid-template-rows:repeat(4, 1fr);grid-column-gap:0px;grid-row-gap:0px;align-items:top;@media screen and (max-width: 680px){display:flex;flex-wrap:wrap;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HeroText=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit6\",label:\"HeroText\"})( false?undefined:{name:\"un1b60\",styles:\"grid-area:1/1/4/3;h1{font-family:'Space Grotesk',sans-serif;font-size:4em;}span{font-size:1.5em;line-height:1.8em;}@media screen and (max-width: 1740px){h1{font-size:3.3em;}span{font-size:1.3em;}}@media screen and (max-width: 680px){text-align:center;h1{font-size:2em;}span{font-size:1em;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HeroImage=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit5\",label:\"HeroImage\"})( false?undefined:{name:\"o30tbg\",styles:\"position:relative;grid-area:1/3/4/4;text-align:right;max-height:500px;width:450px;img{max-width:100%;max-height:100%;margin-left:50px;margin-top:70px;object-fit:cover;}@media screen and (max-width: 680px){text-align:center;width:100%;height:370px;img{width:100%;margin-left:0px;margin-top:40px;object-fit:cover;object-position:center top;}margin-bottom:80px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flotte=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit4\",label:\"Flotte\"})( false?undefined:{name:\"1rg0dt4\",styles:\"width:60px;img{object-position:inherit;object-fit:contain;position:absolute;top:20%;left:20px;background:#fff;width:60px;height:60px;padding:10px;border-radius:50%;animation:float 6s ease-in-out infinite;}@keyframes float{0%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}50%{box-shadow:0 25px 15px 0px rgba(0,0,0,0.02);transform:translatey(-20px);}100%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}}@media screen and (max-width: 680px){img{left:-20px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flotte2=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit3\",label:\"Flotte2\"})( false?undefined:{name:\"djqbtv\",styles:\"position:absolute;top:50%;right:0px;width:60px;img{object-position:inherit;background:#fff;width:60px;height:60px;padding:10px;border-radius:50%;animation:floating 4s ease-in-out infinite;}@keyframes floating{0%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}50%{box-shadow:0 25px 15px 0px rgba(0,0,0,0.02);transform:translatey(-20px);}100%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}}@media screen and (max-width: 680px){right:0px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HeroSubTitle=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit2\",label:\"HeroSubTitle\"})( false?undefined:{name:\"171xryk\",styles:\"display:flex;justify-content:space-between;padding-bottom:10px;border-bottom:1px solid #343B4E;@media screen and (max-width: 680px){flex-wrap:wrap-reverse;justify-content:center;text-align:center;font-weight:700;font-size:0.8em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const SubMenu=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit1\",label:\"SubMenu\"})( false?undefined:{name:\"hgyvv9\",styles:\"margin-top:80px;align-self:flex-end;grid-area:4/1/5/3;ul{padding:0;list-style:none;display:inline-block;border-top:1px solid #343B4E;border-bottom:1px solid #343B4E;li{min-width:150px;display:inline-block;text-align:center;padding:15px 15px 15px 0px;border-right:1px solid #343B4E;margin-right:15px;}li:last-child{margin-right:0px;border-right:none;}}@media screen and (max-width: 1920px){align-self:flex-start;margin-top:50px;}@media screen and (max-width: 1740px){li{font-size:0.8em;}}@media screen and (max-width: 680px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pcm9ubWFjL0RvY3VtZW50cy8xX0RldmxvcHAvcGVyc29uYWwtcG9ydGZvbGlvL3BhY2thZ2VzL21hcnMtdGhlbWUvc3JjL2NvbXBvbmVudHMvdGVtcGxhdGVzL0hvbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ1EwQiIsImZpbGUiOiIvVXNlcnMvaXJvbm1hYy9Eb2N1bWVudHMvMV9EZXZsb3BwL3BlcnNvbmFsLXBvcnRmb2xpby9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL3RlbXBsYXRlcy9Ib21lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IEludHJvIGZyb20gJy4vc2VjdGlvbnMvSW50cm8nO1xuaW1wb3J0IE1lc1Byb2pldHMgZnJvbSAnLi9zZWN0aW9ucy9NZXNQcm9qZXRzJztcbmltcG9ydCBUZXN0aW1vbmlhbHMgZnJvbSAnLi9zZWN0aW9ucy9UZXN0aW1vbmlhbHMnO1xuaW1wb3J0IEJsb2cgZnJvbSAnLi9zZWN0aW9ucy9CbG9nJztcbmltcG9ydCBMaW5rIGZyb20gXCIuLi9saW5rXCI7XG5cblxuXG5jb25zdCBIb21lID0gKHsgc3RhdGUgfSkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKVxuICAgIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXVxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8U2VjdGlvbj5cbiAgICAgICAgICAgIDxBcnRpY2xlIGJhY2tncm91bmQ9XCJodHRwczovL3d3dy50cmlzdGFudG9ybmF0b3JlLmZyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzAzL2JhY2tncm91bmQtbm9pc2Uud2VicFwiPlxuICAgICAgICAgICAgICAgIDxIZXJvU2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPEhlcm9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEhlcm9TdWJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxwPlRyaXN0YW4gVE9STkFUT1JFIC0gRnJlZWxhbmNlIE1hcmtldGluZyBEaWdpdGFsPC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHA+Q0FFTiBOT1JNQU5ESUUgRVQgUEFSSVM8L3A+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0hlcm9TdWJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Ew6l2ZWxvcHBldXIgZnJvbnQtZW5kPGJyLz5BY3F1aXNpdGlvbiBTRU8gJiBTRUE8YnIvPlRyYWNraW5nICYgQW5hbHlzZSBEYXRhPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzcGFuPkplIHN1aXMgdW4gZMOpdmVsb3BwZXVyIHdlYiBGcmVlbGFuY2UgYmFzw6kgZW4gRnJhbmNlLCDDoCBDYWVuIGVuIE5vcm1hbmRpZS4gRXgtR29vZ2xlIGZvciBTdGFydHVwcyBjb29yZGluYXRldXIsIGrigJlhaSBs4oCZaGFiaXR1ZGUgZGUgcHJvcG9zZXIgZGVzIGV4cMOpcmllbmNlcyBkaWdpdGFsZXMgY29tcGzDqHRlcyBkdSBzaXRlIHdlYiBqdXNxdeKAmcOgIGxhIHN0cmF0w6lnaWUgZOKAmWFjcXVpc2l0aW9uLiA8L3NwYW4+PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L0hlcm9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8SGVyb0ltYWdlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJodHRwczovL3d3dy50cmlzdGFudG9ybmF0b3JlLmZyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzA3L1RyaXN0YW4tVE9STkFUT1JFLUdvb2dsZS1WaXZhdGVjaC5qcGdcIiBhbHQ9XCJUcmlzdGFuIFRvcm5hdG9yZSBkw6l2ZWxvcHBldXIgZnJvbnQtZW5kIGZyZWVsYW5jZSBldCB3b3JkcHJlc3NcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEZsb3R0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImh0dHBzOi8vd3d3LnRyaXN0YW50b3JuYXRvcmUuZnIvd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDcvUmVhY3QtaWNvbi5zdmdcIiBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9GbG90dGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RmxvdHRlMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImh0dHBzOi8vd3d3LnRyaXN0YW50b3JuYXRvcmUuZnIvd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDcvYWR3b3Jkcy5zdmdcIiBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9GbG90dGUyPlxuICAgICAgICAgICAgICAgICAgICA8L0hlcm9JbWFnZT5cbiAgICAgICAgICAgICAgICAgICAgPFN1Yk1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBsaW5rPVwiL2RldmVsb3BwZXVyLWZyb250LWVuZC9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIMOAIHByb3BvcyBkZSBtb2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBsaW5rPVwiL2RldmVsb3BwZXVyLWZyb250LWVuZC9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbiBwYXJjb3Vyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGxpbms9XCIvY29udGFjdGVyLXRyaXN0YW4tZnJlZWxhbmNlLXdvcmRwcmVzcy9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYXZhaWxsZXIgYXZlYyBtb2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBsaW5rPVwiL2FzdHVjZXMtZGlnaXRhbGVzL1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzIGFzdHVjZXMgRGlnaXRhbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9TdWJNZW51PlxuICAgICAgICAgICAgICAgICAgICA8QXJyb3dEb3duPjxpbWcgc3JjPVwiaHR0cHM6Ly93d3cudHJpc3RhbnRvcm5hdG9yZS5mci93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wMy9BcnJvdy1kb3duLnN2Z1wiIGFsdD1cImZsw6hjaGUgcXVpIHBvaW50ZSB2ZXJzIGxlIGJhc1wiIC8+PC9BcnJvd0Rvd24+XG4gICAgICAgICAgICAgICAgPC9IZXJvU2VjdGlvbj5cbiAgICAgICAgICAgIDwvQXJ0aWNsZT5cbiAgICAgICAgICAgIDxBcnRpY2xlPlxuICAgICAgICAgICAgICAgIDxJbnRybyAvPlxuICAgICAgICAgICAgPC9BcnRpY2xlPlxuICAgICAgICAgICAgPEFydGljbGUgYmFja2dyb3VuZD1cImh0dHBzOi8vd3d3LnRyaXN0YW50b3JuYXRvcmUuZnIvd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDMvYmFja2dyb3VuZC1ub2lzZS53ZWJwXCI+XG4gICAgICAgICAgICAgICAgPE1lc1Byb2pldHMgLz5cbiAgICAgICAgICAgIDwvQXJ0aWNsZT5cbiAgICAgICAgICAgIDxBcnRpY2xlPlxuICAgICAgICAgICAgICAgIDxUZXN0aW1vbmlhbHMgLz5cbiAgICAgICAgICAgIDwvQXJ0aWNsZT5cbiAgICAgICAgICAgIDxBcnRpY2xlIGJhY2tncm91bmQ9XCJodHRwczovL3d3dy50cmlzdGFudG9ybmF0b3JlLmZyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzAzL2JhY2tncm91bmQtbm9pc2Uud2VicFwiPlxuICAgICAgICAgICAgICAgIDxCbG9nIC8+XG4gICAgICAgICAgICA8L0FydGljbGU+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoSG9tZSk7XG5cbmNvbnN0IFNlY3Rpb24gPSBzdHlsZWQuZGl2YFxuYDtcblxuY29uc3QgQXJ0aWNsZSA9IHN0eWxlZC5kaXZgXG4gICAgcGFkZGluZzogMjAwcHggMjAlO1xuICAgIGJhY2tncm91bmQ6IHVybCgke3Byb3BzID0+IHByb3BzLmJhY2tncm91bmQgfHwgXCJcIn0pO1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE5MjBweCkge1xuICAgICAgICBwYWRkaW5nOiA4MHB4IDEyJTtcbiAgICB9XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTc0MHB4KSB7XG4gICAgICAgIHBhZGRpbmc6IDgwcHggOCU7XG4gICAgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY4MHB4KSB7XG4gICAgICAgIHBhZGRpbmc6IDQwcHggMTIlO1xuICAgIH1cbmBcblxuY29uc3QgSGVyb1NlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCg0LCAxZnIpO1xuICAgIGdyaWQtY29sdW1uLWdhcDogMHB4O1xuICAgIGdyaWQtcm93LWdhcDogMHB4O1xuICAgIGFsaWduLWl0ZW1zOiB0b3A7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjgwcHgpIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgIH1cbmA7XG5cbmNvbnN0IEhlcm9UZXh0ID0gc3R5bGVkLmRpdmBcbiAgICBncmlkLWFyZWE6IDEgLyAxIC8gNCAvIDM7IFxuICAgIGgxIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdTcGFjZSBHcm90ZXNrJywgc2Fucy1zZXJpZjtcbiAgICAgICAgZm9udC1zaXplOiA0ZW07XG4gICAgfVxuICAgIHNwYW4ge1xuICAgICAgICBmb250LXNpemU6IDEuNWVtO1xuICAgICAgICBsaW5lLWhlaWdodDogMS44ZW07XG4gICAgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE3NDBweCkge1xuICAgICAgICBoMSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDMuM2VtO1xuICAgICAgICB9XG4gICAgICAgIHNwYW4ge1xuICAgICAgICBmb250LXNpemU6IDEuM2VtO1xuICAgICAgICB9XG4gICAgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY4MHB4KSB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgaDEge1xuICAgICAgICAgICAgZm9udC1zaXplOiAyZW07XG4gICAgICAgIH1cbiAgICAgICAgc3BhbiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIH1cbiAgICB9XG5gO1xuXG5jb25zdCBIZXJvSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBncmlkLWFyZWE6IDEgLyAzIC8gNCAvIDQ7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgbWF4LWhlaWdodDogNTAwcHg7IFxuICAgIHdpZHRoOiA0NTBweDtcbiAgICBpbWcge1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1MHB4OyBcbiAgICAgICAgbWFyZ2luLXRvcDogNzBweDtcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY4MHB4KSB7XG4gICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgIGhlaWdodDogMzcwcHg7XG4gICAgICAgaW1nIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7IFxuICAgICAgICBtYXJnaW4tdG9wOiA0MHB4O1xuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXIgdG9wO1xuICAgIH1cbiAgICBtYXJnaW4tYm90dG9tOiA4MHB4O1xuICAgIH1cbmA7XG5cbmNvbnN0IEZsb3R0ZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaW1nIHtcbiAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBpbmhlcml0O1xuICAgICAgICBvYmplY3QtZml0OiBjb250YWluO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMjAlO1xuICAgICAgICBsZWZ0OiAyMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmOyBcbiAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgIGhlaWdodDogNjBweDtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICBhbmltYXRpb246IGZsb2F0IDZzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICAgIH1cblxuICAgIEBrZXlmcmFtZXMgZmxvYXQge1xuICAgICAgICAwJSB7XG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDVweCAxNXB4IDBweCByZ2JhKDAsMCwwLDAuMDYpO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGV5KDBweCk7XG4gICAgICAgIH1cbiAgICAgICAgNTAlIHtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMjVweCAxNXB4IDBweCByZ2JhKDAsMCwwLDAuMDIpO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGV5KC0yMHB4KTtcbiAgICAgICAgfVxuICAgICAgICAxMDAlIHtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgNXB4IDE1cHggMHB4IHJnYmEoMCwwLDAsMC4wNik7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZXkoMHB4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY4MHB4KSB7XG4gICAgICAgIGltZyB7XG4gICAgICAgICAgICBsZWZ0OiAtMjBweDtcbiAgICAgICAgfVxuICAgIH1cblxuYFxuXG5jb25zdCBGbG90dGUyID0gc3R5bGVkLmRpdmBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgcmlnaHQ6IDBweDtcbiAgICB3aWR0aDogNjBweDtcbiAgICBpbWcge1xuICAgICAgICBvYmplY3QtcG9zaXRpb246IGluaGVyaXQ7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7IFxuICAgICAgICB3aWR0aDogNjBweDtcbiAgICAgICAgaGVpZ2h0OiA2MHB4O1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIGFuaW1hdGlvbjogZmxvYXRpbmcgNHMgZWFzZS1pbi1vdXQgaW5maW5pdGU7XG4gICAgfVxuXG4gICAgQGtleWZyYW1lcyBmbG9hdGluZyB7XG4gICAgICAgIDAlIHtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgNXB4IDE1cHggMHB4IHJnYmEoMCwwLDAsMC4wNik7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZXkoMHB4KTtcbiAgICAgICAgfVxuICAgICAgICA1MCUge1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMCAyNXB4IDE1cHggMHB4IHJnYmEoMCwwLDAsMC4wMik7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZXkoLTIwcHgpO1xuICAgICAgICB9XG4gICAgICAgIDEwMCUge1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMCA1cHggMTVweCAwcHggcmdiYSgwLDAsMCwwLjA2KTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRleSgwcHgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjgwcHgpIHtcbiAgICAgICAgcmlnaHQ6IDBweDtcbiAgICB9XG5cbmBcblxuY29uc3QgSGVyb1N1YlRpdGxlID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzM0M0I0RTtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2ODBweCkge1xuICAgICAgIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlO1xuICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgfVxuYDtcblxuY29uc3QgU3ViTWVudSA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLXRvcDogODBweDtcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgICBncmlkLWFyZWE6IDQgLyAxIC8gNSAvIDM7IFxuICAgIHVsIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzM0M0I0RTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMzNDNCNEU7XG4gICAgICAgIGxpIHtcbiAgICAgICAgICAgIG1pbi13aWR0aDogMTUwcHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDE1cHggMTVweCAwcHg7XG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMzQzQjRFO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgICAgICB9XG4gICAgICAgIGxpOmxhc3QtY2hpbGQge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTkyMHB4KSB7XG4gICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgIG1hcmdpbi10b3A6IDUwcHg7XG4gICAgICB9XG5cbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNzQwcHgpIHtcbiAgICAgICBsaSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgfVxuICAgIH1cblxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY4MHB4KSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuYFxuXG5jb25zdCBBcnJvd0Rvd24gPSBzdHlsZWQuZGl2YFxuICAgIGdyaWQtYXJlYTogNCAvIDMgLyA1IC8gNDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IFxuICAgIG1hcmdpbi10b3A6IDgwcHg7XG4gICAgaW1nIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICB9XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTkyMHB4KSB7XG4gICAgICAgIG1hcmdpbi10b3A6IDMwcHg7XG4gICAgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE3NDBweCkge1xuICAgICAgICBpbWcge1xuICAgICAgICAgICAgdG9wOiA1MHB4O1xuICAgICAgICAgICAgd2lkdGg6IDMlO1xuICAgICAgICB9XG4gICAgfVxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY4MHB4KSB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGltZyB7XG4gICAgICAgICAgICB3aWR0aDogMyU7XG4gICAgICAgICAgICBwb3NpdGlvbjogaW5oZXJpdDtcbiAgICAgICAgfVxuICAgIH1cbmAiXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ArrowDown=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit0\",label:\"ArrowDown\"})( false?undefined:{name:\"88wmni\",styles:\"grid-area:4/3/5/4;position:relative;margin-top:80px;img{position:absolute;top:0;right:0;}@media screen and (max-width: 1920px){margin-top:30px;}@media screen and (max-width: 1740px){img{top:50px;width:3%;}}@media screen and (max-width: 680px){text-align:center;width:100%;img{width:3%;position:inherit;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/templates/Home.js\n");

/***/ })

})