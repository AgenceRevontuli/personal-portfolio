webpackHotUpdate("personal-portfolio",{

/***/ "./packages/mars-theme/src/components/templates/Home.js":
/*!**************************************************************!*\
  !*** ./packages/mars-theme/src/components/templates/Home.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sections_Intro__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sections/Intro */ \"./packages/mars-theme/src/components/templates/sections/Intro.js\");\n/* harmony import */ var _sections_MesProjets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sections/MesProjets */ \"./packages/mars-theme/src/components/templates/sections/MesProjets.js\");\n/* harmony import */ var _sections_Testimonials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sections/Testimonials */ \"./packages/mars-theme/src/components/templates/sections/Testimonials.js\");\n/* harmony import */ var _sections_Blog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sections/Blog */ \"./packages/mars-theme/src/components/templates/sections/Blog.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const Home=({state})=>{const data=state.source.get(state.router.link);const page=state.source[data.type][data.id];return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(Section,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroSection,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroText,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroSubTitle,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{children:\"Tristan TORNATORE - Freelance Marketing Digital\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{children:\"CAEN NORMANDIE ET PARIS\"})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"h1\",{children:[\"D\\xE9veloppeur front-end\",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"br\",{}),\"Acquisition SEO & SEA\",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"br\",{}),\"Tracking & Analyse Data\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"span\",{children:\"Je suis un d\\xE9veloppeur web Freelance bas\\xE9 en France, \\xE0 Caen en Normandie. Ex-Google for Startups coordinateur, j\\u2019ai l\\u2019habitude de proposer des exp\\xE9riences digitales compl\\xE8tes du site web jusqu\\u2019\\xE0 la strat\\xE9gie d\\u2019acquisition. \"})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(HeroImage,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/07/Tristan-TORNATORE-Google-Vivatech.jpg\",alt:\"Tristan Tornatore d\\xE9veloppeur front-end freelance et wordpress\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Flotte,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/07/React-icon.svg\",width:\"30px\",alt:\"\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Flotte2,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/07/adwords.svg\",alt:\"\"})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(SubMenu,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"ul\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/developpeur-front-end/\",children:\"\\xC0 propos de moi\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/developpeur-front-end/\",children:\"Mon parcours\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/contacter-tristan-freelance-wordpress/\",children:\"Travailler avec moi\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"li\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/astuces-digitales/\",children:\"Mes astuces Digitales\"})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(ArrowDown,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/Arrow-down.svg\",alt:\"fl\\xE8che qui pointe vers le bas\"})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_Intro__WEBPACK_IMPORTED_MODULE_2__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_MesProjets__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_Testimonials__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_sections_Blog__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Home));const Section=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit9\",label:\"Section\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Article=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit8\",label:\"Article\"})(\"padding:200px 20%;background:url(\",props=>props.background||\"\",\");@media screen and (max-width: 1920px){padding:80px 12%;}@media screen and (max-width: 680px){padding:40px 12%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const HeroSection=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit7\",label:\"HeroSection\"})( false?undefined:{name:\"elli65\",styles:\"display:grid;grid-template-columns:repeat(3, 1fr);grid-template-rows:repeat(4, 1fr);grid-column-gap:0px;grid-row-gap:0px;align-items:top;@media screen and (max-width: 680px){display:flex;flex-wrap:wrap;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HeroText=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit6\",label:\"HeroText\"})( false?undefined:{name:\"1pkykfy\",styles:\"grid-area:1/1/4/3;h1{font-family:'Space Grotesk',sans-serif;font-size:4em;}span{font-size:1.5em;line-height:1.8em;}@media screen and (max-width: 680px){text-align:center;h1{font-size:2em;}span{font-size:1em;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HeroImage=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit5\",label:\"HeroImage\"})( false?undefined:{name:\"o30tbg\",styles:\"position:relative;grid-area:1/3/4/4;text-align:right;max-height:500px;width:450px;img{max-width:100%;max-height:100%;margin-left:50px;margin-top:70px;object-fit:cover;}@media screen and (max-width: 680px){text-align:center;width:100%;height:370px;img{width:100%;margin-left:0px;margin-top:40px;object-fit:cover;object-position:center top;}margin-bottom:80px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flotte=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit4\",label:\"Flotte\"})( false?undefined:{name:\"1k8qhi1\",styles:\"width:60px;img{object-position:inherit;position:absolute;top:20%;left:20px;background:#fff;width:60px;height:60px;padding:10px;border-radius:50%;animation:float 6s ease-in-out infinite;}@keyframes float{0%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}50%{box-shadow:0 25px 15px 0px rgba(0,0,0,0.02);transform:translatey(-20px);}100%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}}@media screen and (max-width: 680px){img{left:-20px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flotte2=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit3\",label:\"Flotte2\"})( false?undefined:{name:\"djqbtv\",styles:\"position:absolute;top:50%;right:0px;width:60px;img{object-position:inherit;background:#fff;width:60px;height:60px;padding:10px;border-radius:50%;animation:floating 4s ease-in-out infinite;}@keyframes floating{0%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}50%{box-shadow:0 25px 15px 0px rgba(0,0,0,0.02);transform:translatey(-20px);}100%{box-shadow:0 5px 15px 0px rgba(0,0,0,0.06);transform:translatey(0px);}}@media screen and (max-width: 680px){right:0px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HeroSubTitle=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit2\",label:\"HeroSubTitle\"})( false?undefined:{name:\"171xryk\",styles:\"display:flex;justify-content:space-between;padding-bottom:10px;border-bottom:1px solid #343B4E;@media screen and (max-width: 680px){flex-wrap:wrap-reverse;justify-content:center;text-align:center;font-weight:700;font-size:0.8em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const SubMenu=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit1\",label:\"SubMenu\"})( false?undefined:{name:\"heaf97\",styles:\"margin-top:80px;align-self:flex-end;grid-area:4/1/5/3;ul{padding:0;list-style:none;display:inline-block;border-top:1px solid #343B4E;border-bottom:1px solid #343B4E;li{min-width:150px;display:inline-block;text-align:center;padding:15px 15px 15px 0px;border-right:1px solid #343B4E;margin-right:15px;}li:last-child{margin-right:0px;border-right:none;}}@media screen and (max-width: 1920px){align-self:flex-start;margin-top:50px;}@media screen and (max-width: 680px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ArrowDown=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1qgmgit0\",label:\"ArrowDown\"})( false?undefined:{name:\"uxrpqh\",styles:\"grid-area:4/3/5/4;position:relative;margin-top:80px;img{position:absolute;top:0;right:0;}@media screen and (max-width: 1920px){margin-top:30px;}@media screen and (max-width: 680px){text-align:center;width:100%;img{width:3%;position:inherit;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/templates/Home.js\n");

/***/ })

})