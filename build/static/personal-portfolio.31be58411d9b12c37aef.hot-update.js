webpackHotUpdate("personal-portfolio",{

/***/ "./packages/mars-theme/src/components/templates/Developpement.js":
/*!***********************************************************************!*\
  !*** ./packages/mars-theme/src/components/templates/Developpement.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const Developp=({state,actions,libraries})=>{const data=state.source.get(state.router.link);const page=state.source[data.type][data.id];const Html2React=libraries.html2react.Component;return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(Section,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(Header,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",{children:\"Trouvez le partenaire id\\xE9al pour la r\\xE9alisation de votre site internet\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(SubHeader,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Image1,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:\"https://www.tristantornatore.fr/wp-content/uploads/2022/06/developpement-site-internet-freelance.jpg\",alt:\"developpement-site-internet-freelance\"})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"div\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{children:\"Vous cherchez un prestataire pour le d\\xE9veloppement de votre site internet ? D\\xE9couvrez comment nous pouvons collaborer sur votre projet et profitez des conseils d'un expert \\xE0 la fois technique et strat\\xE9gique pour r\\xE9pondre au plus pr\\xE8s de votre besoin digital. \"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ButtonPrincipal,{children:\"PROPOSER UN PROJET\"})})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(SiteItems,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(SiteItem,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",{children:\"Site vitrine\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{children:\"Cr\\xE9ation de site pour d\\xE9velopper votre pr\\xE9sence en ligne, mettre en avant vos valeurs et g\\xE9n\\xE9rer de la g\\xE9n\\xE9ration de leads gr\\xE2ce \\xE0 un copywriting travaill\\xE9.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(SiteItem,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",{children:\"Site E-commerce\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{children:\"Cr\\xE9ation de site de vente en ligne pour digitaliser votre entreprise et optimiser votre tunnel de vente afin d'avoir le meilleur taux de conversion possible.\"})]})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Article,{background:\"https://www.tristantornatore.fr/wp-content/uploads/2022/03/background-noise.webp\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Quote,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"p\",{children:[\"Je d\\xE9veloppe des \",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",{children:\"sites sur-mesures\"}),\" adapt\\xE9s \\xE0 vos objectifs avec une prise en main simple et enti\\xE8rement \",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",{children:\"modifiable par vos soins.\"})]})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(Article,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(InfoSite,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"div\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"div\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",{children:\"Vous avez besoin d'un site internet simple\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",{children:\"R\\xE9alisation de site sous wordpress\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{children:\"Votre besoin est simple. Vous souhaite un site e-commerce, un site de partage, une marketplace ou un blog, nous d\\xE9veloppons pour vous un site wordpress sur-mesure. Wordpress \\xE9quipe 46% des sites internet dans le monde. Reconnu pour \\xEAtre flexible et enti\\xE8rement personnalisable, c'est la star des site vitrine et des site e-commerce. Pourtant vous pourriez entendre qu'il n'est pas bien optimis\\xE9 pour la rapidit\\xE9. C'est ici que j'interviens pour d\\xE9velopper un site complet et optimis\\xE9 pour votre r\\xE9f\\xE9rencement naturel en proposant une solution unique qui \\xE9vite les principaux plugins connus pour ralentir votre site.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"ul\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Design d'une maquette \\xE9ditable sous figma, vous \\xEAtes inclu dans la cr\\xE9ation graphique de votre site\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Cr\\xE9ation d'un th\\xE8me sur mesure fid\\xE8le \\xE0 la maquette\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"D\\xE9veloppement des fonctionnalit\\xE9s et int\\xE9gration des plugins\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Personnalisation du backOffice pour vous permettre une interface de gestion simple pour votre site\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Optimisation du temps de chargement\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Optimisation de votre r\\xE9f\\xE9rencement naturel\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"S\\xE9curisation et mise en ligne du site\"})]})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(InfoSite,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"div\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"div\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",{children:\"Ou un projet de d\\xE9veloppement plus pouss\\xE9\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",{children:\"Je d\\xE9veloppe votre webapp sous reactJS\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{children:\"Vous avez un projet plus ambitieux qu'un site vitrine ou e-commerce ? Je d\\xE9veloppe des solutions qui r\\xE9pondent \\xE0 des besoins plus pr\\xE9cis sous reactJS, le c\\xE9l\\xE8bre framework d\\xE9velopp\\xE9 par Facebook qui \\xE9quipe des site web comme Airbnb ou Netflix. Je r\\xE9flechis avec vous \\xE0 la cr\\xE9ation du besoin en d\\xE9veloppant des users stories et pr\\xE9parant les sprints de d\\xE9veloppement \\xE9tape par \\xE9tape. Vous souhaitez \\xE9ditez votre application avec wordpress ? J'ai l'habitude de d\\xE9velopper des solutions avec wordpress HeadLess et d'autres fonctionnalit\\xE9s.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxs\"])(\"ul\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Construction des users stories\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Pr\\xE9paration des recommandations techniques\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Cr\\xE9ation des maquettes sous figma\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Gestion de projet et planification sous jira\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"D\\xE9veloppement des diff\\xE9rents sprints\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"Gestion des tickets\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",{children:\"S\\xE9curisation et mise en ligne du site\"})]})})]})})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Developp));const Section=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf79\",label:\"Section\"})( false?undefined:{name:\"1rd6x3f\",styles:\"@media screen and (max-width: 1920px){padding:80px 12%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Article=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf78\",label:\"Article\"})(\"padding:100px 20%;background:url(\",props=>props.background||\"\",\");strong{background:#343B4E;color:#fff;padding:0px 15px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const SiteItems=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf77\",label:\"SiteItems\"})( false?undefined:{name:\"p3614v\",styles:\"display:flex;gap:40px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Quote=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf76\",label:\"Quote\"})( false?undefined:{name:\"xg7qig\",styles:\"text-align:center;font-size:5em\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const SiteItem=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf75\",label:\"SiteItem\"})( false?undefined:{name:\"kcp2fu\",styles:\"border:2px solid #343B4E;padding:30px;line-height:2.2em;h2{font-size:3em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf74\",label:\"Header\"})( false?undefined:{name:\"m7nrtn\",styles:\"padding:200px 20%;position:relative;h1{font-size:5.55em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const SubHeader=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf73\",label:\"SubHeader\"})( false?undefined:{name:\"rcy9gp\",styles:\"display:flex;align-items:center;gap:40px;margin-bottom:40px;justify-content:space-between;p{max-width:800px;line-height:2.2em;font-size:1.3em;margin-bottom:40px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pcm9ubWFjL0RvY3VtZW50cy8xX0RldmxvcHAvcGVyc29uYWwtcG9ydGZvbGlvL3BhY2thZ2VzL21hcnMtdGhlbWUvc3JjL2NvbXBvbmVudHMvdGVtcGxhdGVzL0RldmVsb3BwZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEk0QiIsImZpbGUiOiIvVXNlcnMvaXJvbm1hYy9Eb2N1bWVudHMvMV9EZXZsb3BwL3BlcnNvbmFsLXBvcnRmb2xpby9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL3RlbXBsYXRlcy9EZXZlbG9wcGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuLi9saW5rXCI7XG5cblxuY29uc3QgRGV2ZWxvcHAgID0gKHsgc3RhdGUsIGFjdGlvbnMsIGxpYnJhcmllcyB9KSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspXG4gICAgY29uc3QgcGFnZSA9IHN0YXRlLnNvdXJjZVtkYXRhLnR5cGVdW2RhdGEuaWRdXG4gICAgY29uc3QgSHRtbDJSZWFjdCA9IGxpYnJhcmllcy5odG1sMnJlYWN0LkNvbXBvbmVudDtcblxuICAgIHJldHVybihcbiAgICAgICAgPFNlY3Rpb24+XG4gICAgICAgICAgIDxIZWFkZXI+XG4gICAgICAgICAgICAgICAgPGgxPlRyb3V2ZXogbGUgcGFydGVuYWlyZSBpZMOpYWwgcG91ciBsYSByw6lhbGlzYXRpb24gZGUgdm90cmUgc2l0ZSBpbnRlcm5ldDwvaDE+XG4gICAgICAgICAgICAgICAgPFN1YkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZTE+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJodHRwczovL3d3dy50cmlzdGFudG9ybmF0b3JlLmZyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzA2L2RldmVsb3BwZW1lbnQtc2l0ZS1pbnRlcm5ldC1mcmVlbGFuY2UuanBnXCIgYWx0PVwiZGV2ZWxvcHBlbWVudC1zaXRlLWludGVybmV0LWZyZWVsYW5jZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ltYWdlMT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5Wb3VzIGNoZXJjaGV6IHVuIHByZXN0YXRhaXJlIHBvdXIgbGUgZMOpdmVsb3BwZW1lbnQgZGUgdm90cmUgc2l0ZSBpbnRlcm5ldCA/IETDqWNvdXZyZXogY29tbWVudCBub3VzIHBvdXZvbnMgY29sbGFib3JlciBzdXIgdm90cmUgcHJvamV0IGV0IHByb2ZpdGV6IGRlcyBjb25zZWlscyBkJ3VuIGV4cGVydCDDoCBsYSBmb2lzIHRlY2huaXF1ZSBldCBzdHJhdMOpZ2lxdWUgcG91ciByw6lwb25kcmUgYXUgcGx1cyBwcsOocyBkZSB2b3RyZSBiZXNvaW4gZGlnaXRhbC4gPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblByaW5jaXBhbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPUE9TRVIgVU4gUFJPSkVUXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b25QcmluY2lwYWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvU3ViSGVhZGVyPlxuICAgICAgICAgICA8L0hlYWRlcj5cbiAgICAgICAgICAgPEFydGljbGUgYmFja2dyb3VuZD1cImh0dHBzOi8vd3d3LnRyaXN0YW50b3JuYXRvcmUuZnIvd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDMvYmFja2dyb3VuZC1ub2lzZS53ZWJwXCI+XG4gICAgICAgICAgICAgICAgPFNpdGVJdGVtcz5cbiAgICAgICAgICAgICAgICAgICAgPFNpdGVJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlNpdGUgdml0cmluZTwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5DcsOpYXRpb24gZGUgc2l0ZSBwb3VyIGTDqXZlbG9wcGVyIHZvdHJlIHByw6lzZW5jZSBlbiBsaWduZSwgbWV0dHJlIGVuIGF2YW50IHZvcyB2YWxldXJzIGV0IGfDqW7DqXJlciBkZSBsYSBnw6luw6lyYXRpb24gZGUgbGVhZHMgZ3LDomNlIMOgIHVuIGNvcHl3cml0aW5nIHRyYXZhaWxsw6kuPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L1NpdGVJdGVtPlxuICAgICAgICAgICAgICAgICAgICA8U2l0ZUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDI+U2l0ZSBFLWNvbW1lcmNlPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNyw6lhdGlvbiBkZSBzaXRlIGRlIHZlbnRlIGVuIGxpZ25lIHBvdXIgZGlnaXRhbGlzZXIgdm90cmUgZW50cmVwcmlzZSBldCBvcHRpbWlzZXIgdm90cmUgdHVubmVsIGRlIHZlbnRlIGFmaW4gZCdhdm9pciBsZSBtZWlsbGV1ciB0YXV4IGRlIGNvbnZlcnNpb24gcG9zc2libGUuPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L1NpdGVJdGVtPlxuICAgICAgICAgICAgICAgIDwvU2l0ZUl0ZW1zPlxuICAgICAgICAgICA8L0FydGljbGU+XG4gICAgICAgICAgIDxBcnRpY2xlIGJhY2tncm91bmQ9XCJodHRwczovL3d3dy50cmlzdGFudG9ybmF0b3JlLmZyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzAzL2JhY2tncm91bmQtbm9pc2Uud2VicFwiPlxuICAgICAgICAgICAgICAgIDxRdW90ZT5cbiAgICAgICAgICAgICAgICAgICAgPHA+SmUgZMOpdmVsb3BwZSBkZXMgPHN0cm9uZz5zaXRlcyBzdXItbWVzdXJlczwvc3Ryb25nPiBhZGFwdMOpcyDDoCB2b3Mgb2JqZWN0aWZzIGF2ZWMgdW5lIHByaXNlIGVuIG1haW4gc2ltcGxlIGV0IGVudGnDqHJlbWVudCA8c3Ryb25nPm1vZGlmaWFibGUgcGFyIHZvcyBzb2lucy48L3N0cm9uZz48L3A+XG4gICAgICAgICAgICAgICAgPC9RdW90ZT5cbiAgICAgICAgICAgPC9BcnRpY2xlPlxuICAgICAgICAgICA8QXJ0aWNsZT5cbiAgICAgICAgICAgICAgICA8SW5mb1NpdGU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Wb3VzIGF2ZXogYmVzb2luIGQndW4gc2l0ZSBpbnRlcm5ldCBzaW1wbGU8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Sw6lhbGlzYXRpb24gZGUgc2l0ZSBzb3VzIHdvcmRwcmVzczwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Vm90cmUgYmVzb2luIGVzdCBzaW1wbGUuIFZvdXMgc291aGFpdGUgdW4gc2l0ZSBlLWNvbW1lcmNlLCB1biBzaXRlIGRlIHBhcnRhZ2UsIHVuZSBtYXJrZXRwbGFjZSBvdSB1biBibG9nLCBub3VzIGTDqXZlbG9wcG9ucyBwb3VyIHZvdXMgdW4gc2l0ZSB3b3JkcHJlc3Mgc3VyLW1lc3VyZS4gV29yZHByZXNzIMOpcXVpcGUgNDYlIGRlcyBzaXRlcyBpbnRlcm5ldCBkYW5zIGxlIG1vbmRlLiBSZWNvbm51IHBvdXIgw6p0cmUgZmxleGlibGUgZXQgZW50acOocmVtZW50IHBlcnNvbm5hbGlzYWJsZSwgYydlc3QgbGEgc3RhciBkZXMgc2l0ZSB2aXRyaW5lIGV0IGRlcyBzaXRlIGUtY29tbWVyY2UuIFBvdXJ0YW50IHZvdXMgcG91cnJpZXogZW50ZW5kcmUgcXUnaWwgbidlc3QgcGFzIGJpZW4gb3B0aW1pc8OpIHBvdXIgbGEgcmFwaWRpdMOpLiBDJ2VzdCBpY2kgcXVlIGonaW50ZXJ2aWVucyBwb3VyIGTDqXZlbG9wcGVyIHVuIHNpdGUgY29tcGxldCBldCBvcHRpbWlzw6kgcG91ciB2b3RyZSByw6lmw6lyZW5jZW1lbnQgbmF0dXJlbCBlbiBwcm9wb3NhbnQgdW5lIHNvbHV0aW9uIHVuaXF1ZSBxdWkgw6l2aXRlIGxlcyBwcmluY2lwYXV4IHBsdWdpbnMgY29ubnVzIHBvdXIgcmFsZW50aXIgdm90cmUgc2l0ZS48L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVzaWduIGQndW5lIG1hcXVldHRlIMOpZGl0YWJsZSBzb3VzIGZpZ21hLCB2b3VzIMOqdGVzIGluY2x1IGRhbnMgbGEgY3LDqWF0aW9uIGdyYXBoaXF1ZSBkZSB2b3RyZSBzaXRlPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNyw6lhdGlvbiBkJ3VuIHRow6htZSBzdXIgbWVzdXJlIGZpZMOobGUgw6AgbGEgbWFxdWV0dGU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RMOpdmVsb3BwZW1lbnQgZGVzIGZvbmN0aW9ubmFsaXTDqXMgZXQgaW50w6lncmF0aW9uIGRlcyBwbHVnaW5zPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBlcnNvbm5hbGlzYXRpb24gZHUgYmFja09mZmljZSBwb3VyIHZvdXMgcGVybWV0dHJlIHVuZSBpbnRlcmZhY2UgZGUgZ2VzdGlvbiBzaW1wbGUgcG91ciB2b3RyZSBzaXRlPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9wdGltaXNhdGlvbiBkdSB0ZW1wcyBkZSBjaGFyZ2VtZW50PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9wdGltaXNhdGlvbiBkZSB2b3RyZSByw6lmw6lyZW5jZW1lbnQgbmF0dXJlbDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Tw6ljdXJpc2F0aW9uIGV0IG1pc2UgZW4gbGlnbmUgZHUgc2l0ZTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9JbmZvU2l0ZT5cbiAgICAgICAgICAgICAgICA8SW5mb1NpdGU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5PdSB1biBwcm9qZXQgZGUgZMOpdmVsb3BwZW1lbnQgcGx1cyBwb3Vzc8OpPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+SmUgZMOpdmVsb3BwZSB2b3RyZSB3ZWJhcHAgc291cyByZWFjdEpTPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Wb3VzIGF2ZXogdW4gcHJvamV0IHBsdXMgYW1iaXRpZXV4IHF1J3VuIHNpdGUgdml0cmluZSBvdSBlLWNvbW1lcmNlID8gSmUgZMOpdmVsb3BwZSBkZXMgc29sdXRpb25zIHF1aSByw6lwb25kZW50IMOgIGRlcyBiZXNvaW5zIHBsdXMgcHLDqWNpcyBzb3VzIHJlYWN0SlMsIGxlIGPDqWzDqGJyZSBmcmFtZXdvcmsgZMOpdmVsb3Bww6kgcGFyIEZhY2Vib29rIHF1aSDDqXF1aXBlIGRlcyBzaXRlIHdlYiBjb21tZSBBaXJibmIgb3UgTmV0ZmxpeC4gSmUgcsOpZmxlY2hpcyBhdmVjIHZvdXMgw6AgbGEgY3LDqWF0aW9uIGR1IGJlc29pbiBlbiBkw6l2ZWxvcHBhbnQgZGVzIHVzZXJzIHN0b3JpZXMgZXQgcHLDqXBhcmFudCBsZXMgc3ByaW50cyBkZSBkw6l2ZWxvcHBlbWVudCDDqXRhcGUgcGFyIMOpdGFwZS4gVm91cyBzb3VoYWl0ZXogw6lkaXRleiB2b3RyZSBhcHBsaWNhdGlvbiBhdmVjIHdvcmRwcmVzcyA/IEonYWkgbCdoYWJpdHVkZSBkZSBkw6l2ZWxvcHBlciBkZXMgc29sdXRpb25zIGF2ZWMgd29yZHByZXNzIEhlYWRMZXNzIGV0IGQnYXV0cmVzIGZvbmN0aW9ubmFsaXTDqXMuPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNvbnN0cnVjdGlvbiBkZXMgdXNlcnMgc3RvcmllczwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcsOpcGFyYXRpb24gZGVzIHJlY29tbWFuZGF0aW9ucyB0ZWNobmlxdWVzPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNyw6lhdGlvbiBkZXMgbWFxdWV0dGVzIHNvdXMgZmlnbWE8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2VzdGlvbiBkZSBwcm9qZXQgZXQgcGxhbmlmaWNhdGlvbiBzb3VzIGppcmE8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RMOpdmVsb3BwZW1lbnQgZGVzIGRpZmbDqXJlbnRzIHNwcmludHM8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2VzdGlvbiBkZXMgdGlja2V0czwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Tw6ljdXJpc2F0aW9uIGV0IG1pc2UgZW4gbGlnbmUgZHUgc2l0ZTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9JbmZvU2l0ZT5cbiAgICAgICAgICAgPC9BcnRpY2xlPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KERldmVsb3BwKTtcblxuY29uc3QgU2VjdGlvbiA9IHN0eWxlZC5kaXZgXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTkyMHB4KSB7XG4gICAgICAgIHBhZGRpbmc6IDgwcHggMTIlO1xuICAgIH1cbmA7XG5cbmNvbnN0IEFydGljbGUgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmc6IDEwMHB4IDIwJTtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kIHx8IFwiXCJ9KTtcbiAgICBzdHJvbmcge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMzQzQjRFO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgcGFkZGluZzogMHB4IDE1cHg7XG4gICAgfVxuYFxuXG5jb25zdCBTaXRlSXRlbXMgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOiA0MHB4O1xuYFxuXG5jb25zdCBRdW90ZSA9IHN0eWxlZC5kaXYgYFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDVlbTtcbmBcblxuY29uc3QgU2l0ZUl0ZW0gPSBzdHlsZWQuZGl2YFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMzNDNCNEU7XG4gICAgcGFkZGluZzogMzBweDtcbiAgICBsaW5lLWhlaWdodDogMi4yZW07XG4gICAgaDIge1xuICAgICAgICBmb250LXNpemU6IDNlbTtcbiAgICB9XG5gXG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZC5kaXZgXG4gICAgcGFkZGluZzogMjAwcHggMjAlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogNS41NWVtO1xuICAgIH1cbmBcblxuY29uc3QgU3ViSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZ2FwOiA0MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gICAgcCB7XG4gICAgICAgIG1heC13aWR0aDogODAwcHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyLjJlbTtcbiAgICAgICAgZm9udC1zaXplOiAxLjNlbTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgICB9XG5gXG5cbmNvbnN0IEltYWdlMSA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLWxlZnQ6IDgwcHg7XG4gICAgaW1nIHtcbiAgICAgICAgd2lkdGg6IDQwMHB4O1xuICAgICAgICBoZWlnaHQ6IDQwMHB4O1xuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBib3JkZXI6IDFweCBkYXNoZWQgIzM0M0I0RTtcbiAgICB9XG5gXG5jb25zdCBCdXR0b25QcmluY2lwYWwgPSBzdHlsZWQuZGl2YFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMzNDNCNEU7XG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbiAgICA6aG92ZXIge1xuICAgICAgICBib3gtc2hhZG93OiAtNHB4IDRweCAwcHggIzM0M0I0RTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDRweCkgdHJhbnNsYXRlWSgtNHB4KTtcbiAgICB9XG5gXG5cbmNvbnN0IEluZm9TaXRlID0gc3R5bGVkLmRpdmBcbiAgICAmID4gZGl2IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiA0MHB4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBkaXYge1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MCU7XG4gICAgICAgIH1cbiAgICAgICAgbGluZS1oZWlnaHQ6IDJlbTtcbiAgICB9XG5cbiAgICBkaXY6bnRoLWNoaWxkKDEpIHtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xuICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgfVxuXG4gICAgaDIge1xuICAgICAgICBmb250LXNpemU6IDNlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuNmVtO1xuICAgIH1cbiAgICBoMyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIH1cbiAgICB1bCB7XG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgfVxuICAgIGxpIHtcbiAgICAgICAgZm9udC1zaXplOiAxLjNlbTtcbiAgICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdTcGFjZSBHcm90ZXNrJywgc2Fucy1zZXJpZjtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMzNDNCNEU7XG4gICAgfVxuYCJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Image1=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf72\",label:\"Image1\"})( false?undefined:{name:\"mbrgtr\",styles:\"margin-left:80px;img{width:400px;height:400px;object-fit:cover;border-radius:50%;padding:10px;border:1px dashed #343B4E;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ButtonPrincipal=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf71\",label:\"ButtonPrincipal\"})( false?undefined:{name:\"1nyafjn\",styles:\"border:2px solid #343B4E;padding:10px 20px;display:inline-block;transition:all 0.2s;:hover{box-shadow:-4px 4px 0px #343B4E;transform:translateX(4px) translateY(-4px);}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const InfoSite=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e15xewf70\",label:\"InfoSite\"})( false?undefined:{name:\"18wrzah\",styles:\"&>div{display:flex;gap:40px;align-items:center;line-height:2em;div{max-width:50%;}}div:nth-child(1){flex-direction:row-reverse;background:red;}h2{font-size:3em;line-height:1.6em;}h3{font-size:2em;}ul{list-style:none;}li{font-size:1.3em;padding:15px;font-family:'Space Grotesk',sans-serif;border-bottom:1px solid #343B4E;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/templates/Developpement.js\n");

/***/ })

})